import { useState, useEffect } from 'react'
import './App.css'

interface Artist {
  name: string;
  spotifyRank?: number;
  available?: boolean;
  matchType?: string;
}

interface AvailabilityResult {
  totalArtists: number;
  availableCount: number;
  unavailableCount: number;
  availableArtists: Artist[];
  unavailableArtists: Artist[];
  canGenerateRecommendations: boolean;
  needsMoreArtists: number;
}

interface RecommendationResult {
  userId: string;
  artistNames: string[];
  recommendations: string[];
  recommendationCount: number;
  algorithm: string;
  createdAt: string;
}

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [spotifyArtists, setSpotifyArtists] = useState<Artist[]>([]);
  const [availabilityResult, setAvailabilityResult] = useState<AvailabilityResult | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<Artist[]>([]);
  const [selectedArtists, setSelectedArtists] = useState<Artist[]>([]);
  const [recommendations, setRecommendations] = useState<RecommendationResult | null>(null);
  const [loading, setLoading] = useState(false);

  const API_BASE = 'http://localhost:8080/api';

  // Step 1: Authenticate with Spotify
  const handleSpotifyAuth = () => {
    window.location.href = 'http://localhost:8080/auth/spotify';
  };

  // Step 2: Get top artists from Spotify
  const fetchTopArtists = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE}/top_artists`);
      const data = await response.json();
      
      if (response.ok) {
        setSpotifyArtists(data.artistNames.map((name: string, index: number) => ({
          name,
          spotifyRank: index + 1
        })));
      } else {
        console.error('Failed to fetch top artists:', data.error);
      }
    } catch (error) {
      console.error('Error fetching top artists:', error);
    } finally {
      setLoading(false);
    }
  };

  // Step 3: Check artist availability and auto-generate if possible
  const checkArtistAvailability = async (artists: Artist[]) => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE}/check_artists_availability`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          artistNames: artists.map(a => a.name),
          userId: 'user123' // In real app, get from auth
        })
      });
      const data = await response.json();
      
      if (response.ok) {
        if (data.autoGenerated) {
          // Auto-generated recommendations - show immediately
          setRecommendations(data.recommendations);
          setAvailabilityResult({
            totalArtists: data.totalArtists,
            availableCount: data.availableCount,
            unavailableCount: data.unavailableCount,
            availableArtists: data.availableArtists,
            unavailableArtists: data.unavailableArtists,
            canGenerateRecommendations: true,
            needsMoreArtists: 0
          });
        } else {
          // Need search interface - show availability and pre-select available artists
          setAvailabilityResult(data);
          setSelectedArtists(data.availableArtists);
        }
      } else {
        console.error('Failed to check availability:', data.error);
      }
    } catch (error) {
      console.error('Error checking availability:', error);
    } finally {
      setLoading(false);
    }
  };

  // Step 4: Search artists
  const searchArtists = async (query: string) => {
    if (query.length < 2) {
      setSearchResults([]);
      return;
    }

    try {
      const response = await fetch(`${API_BASE}/artists/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      
      if (response.ok) {
        setSearchResults(data.results);
      } else {
        console.error('Search failed:', data.error);
      }
    } catch (error) {
      console.error('Error searching artists:', error);
    }
  };

  // Step 5: Generate recommendations from manual selection
  const generateRecommendations = async () => {
    if (selectedArtists.length < 5) {
      alert('Please select at least 5 artists');
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_BASE}/recommend`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userId: 'user123', // In real app, get from auth
          artistNames: selectedArtists.map(a => a.name)
        })
      });
      const data = await response.json();
      
      if (response.ok) {
        setRecommendations(data);
      } else {
        alert(`Error: ${data.message || data.error}`);
      }
    } catch (error) {
      console.error('Error generating recommendations:', error);
      alert('Failed to generate recommendations');
    } finally {
      setLoading(false);
    }
  };

  const addArtist = (artist: Artist) => {
    if (!selectedArtists.find(a => a.name === artist.name)) {
      setSelectedArtists([...selectedArtists, artist]);
    }
    setSearchQuery('');
    setSearchResults([]);
  };

  const removeArtist = (artistName: string) => {
    setSelectedArtists(selectedArtists.filter(a => a.name !== artistName));
  };

  // Initialize on mount
  useEffect(() => {
    // Check if user is authenticated (simplified check)
    const checkAuth = () => {
      fetch(`${API_BASE}/top_artists`)
        .then(response => {
          if (response.ok) {
            setIsAuthenticated(true);
            fetchTopArtists();
          } else {
            setIsAuthenticated(false);
          }
        })
        .catch(() => setIsAuthenticated(false));
    };

    checkAuth();
  }, []);

  // Check availability when Spotify artists are loaded
  useEffect(() => {
    if (spotifyArtists.length > 0) {
      checkArtistAvailability(spotifyArtists);
    }
  }, [spotifyArtists]);

  // Search when query changes
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      searchArtists(searchQuery);
    }, 300);
    return () => clearTimeout(timeoutId);
  }, [searchQuery]);

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md text-center">
          <h1 className="text-2xl font-bold mb-4">Spotify Track Recommender</h1>
          <p className="mb-6">Connect your Spotify account to get personalized music recommendations</p>
          <button 
            onClick={handleSpotifyAuth}
            className="bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600"
          >
            Connect Spotify
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Spotify Track Recommender</h1>

        {/* Step 1: Show Spotify Artists */}
        {spotifyArtists.length > 0 && (
          <div className="bg-white p-6 rounded-lg shadow-md mb-6">
            <h2 className="text-xl font-semibold mb-4">Your Top Spotify Artists</h2>
            <div className="grid grid-cols-2 gap-2">
              {spotifyArtists.map(artist => (
                <div key={artist.name} className="flex items-center justify-between p-2 border rounded">
                  <span>#{artist.spotifyRank} {artist.name}</span>
                  <span className={`px-2 py-1 rounded text-xs ${
                    availabilityResult?.availableArtists.find(a => a.name === artist.name) 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {availabilityResult?.availableArtists.find(a => a.name === artist.name) ? 'Available' : 'Not Available'}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Step 2: Show Availability Status */}
        {availabilityResult && !recommendations && (
          <div className="bg-white p-6 rounded-lg shadow-md mb-6">
            <h2 className="text-xl font-semibold mb-4">Artist Availability Status</h2>
            <div className="grid grid-cols-3 gap-4 mb-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{availabilityResult.availableCount}</div>
                <div className="text-sm text-gray-600">Available</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">{availabilityResult.unavailableCount}</div>
                <div className="text-sm text-gray-600">Not Available</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{availabilityResult.needsMoreArtists}</div>
                <div className="text-sm text-gray-600">Need More</div>
              </div>
            </div>
            
            {!availabilityResult.canGenerateRecommendations && (
              <div className="bg-yellow-50 border border-yellow-200 rounded p-4">
                <p className="text-yellow-800">
                  You need {availabilityResult.needsMoreArtists} more artists to generate recommendations. 
                  Use the search below to find artists from our dataset.
                </p>
              </div>
            )}
          </div>
        )}

        {/* Step 3: Search and Add Artists - Only show if no recommendations yet */}
        {!recommendations && (
          <div className="bg-white p-6 rounded-lg shadow-md mb-6">
            <h2 className="text-xl font-semibold mb-4">Add More Artists</h2>
          <div className="mb-4">
            <input
              type="text"
              placeholder="Search for artists in our dataset..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {searchResults.length > 0 && (
            <div className="border rounded-lg max-h-48 overflow-y-auto">
              {searchResults.map(artist => (
                <div 
                  key={artist.name}
                  onClick={() => addArtist(artist)}
                  className="p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0"
                >
                  <div className="flex justify-between items-center">
                    <span>{artist.name}</span>
                    <span className={`px-2 py-1 rounded text-xs ${
                      artist.matchType === 'exact' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                    }`}>
                      {artist.matchType === 'exact' ? 'Exact Match' : 'Partial Match'}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}
          </div>
        )}

        {/* Step 4: Selected Artists - Only show if no recommendations yet */}
        {!recommendations && (
        <div className="bg-white p-6 rounded-lg shadow-md mb-6">
          <h2 className="text-xl font-semibold mb-4">
            Selected Artists ({selectedArtists.length}/5+)
          </h2>
          <div className="flex flex-wrap gap-2">
            {selectedArtists.map(artist => (
              <div key={artist.name} className="flex items-center bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                <span>{artist.name}</span>
                <button 
                  onClick={() => removeArtist(artist.name)}
                  className="ml-2 text-blue-600 hover:text-blue-800"
                >
                  ×
                </button>
              </div>
            ))}
          </div>
          
          {selectedArtists.length >= 5 && (
            <button
              onClick={generateRecommendations}
              disabled={loading}
              className="mt-4 bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400"
            >
              {loading ? 'Generating...' : 'Generate Recommendations'}
            </button>
          )}
        </div>
        )}

        {/* Step 5: Recommendations */}
        {recommendations && (
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4">Your Recommendations</h2>
            <div className="grid gap-3">
              {recommendations.recommendations.map((track, index) => (
                <div key={track} className="p-3 border rounded-lg flex items-center">
                  <span className="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">
                    {index + 1}
                  </span>
                  <span className="font-medium">{track}</span>
                </div>
              ))}
            </div>
            <div className="mt-4 text-sm text-gray-600">
              Generated using {recommendations.algorithm} algorithm from {recommendations.artistNames.length} artists
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App
